
service: serverless-auth-aws

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: eu-central-1

  iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:Query"
          - "dynamodb:Scan"
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
        Resource: "*"

  environment:
      DYNAMODB_USER_TABLE: ${self:custom.dynamodb.userTable}
      JWT_SECRET: "@bvb"

functions:
  getUser:
    handler: src/functions/getUser.getUser
    events:
      - http:
          method: get
          cors: true
          path: /v1/users/{ID}
  createUser:
    handler: src/functions/createUser.createUser
    events:
      - http:
          method: post
          cors: true
          path: /v1/users
          # authorizer: validate
          # request:
          #   schema:
          #     application/json: ${file(src/schema/createUser.json)}
  validate:
    handler: src/functions/validate.validate
  loginUser:
    handler: src/functions/loginUser.login
    events:
      - http:
          method: post
          cors: true
          path: /v1/users/login
          # request:
          #   schema:
          #     application/json: ${file(src/schema/login_request.json)}
  

  

# plugins:
#   - serverless-pseudo-parameters
#   - serverless-mocha
custom:
  dynamodb:
    userTable: ${self:service}-userTable-${self:provider.stage}
  serverless-mocha-plugin:
    testTemplate: templates/testTemplate.ejs
    functionTemplate: templates/functionTemplate.ejs

resources:
  Resources:
    userTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamodb.userTable}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
